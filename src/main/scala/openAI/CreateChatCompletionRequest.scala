package openAI

import smithy4s.Document
import smithy4s.Hints
import smithy4s.Schema
import smithy4s.ShapeId
import smithy4s.ShapeTag
import smithy4s.schema.Schema.boolean
import smithy4s.schema.Schema.document
import smithy4s.schema.Schema.double
import smithy4s.schema.Schema.int
import smithy4s.schema.Schema.string
import smithy4s.schema.Schema.struct

/** @param messages
  *   A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
  * @param frequency_penalty
  *   Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
  *   
  *   [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
  * @param n
  *   How many chat completion choices to generate for each input message.
  * @param max_tokens
  *   The maximum number of [tokens](/tokenizer) to generate in the chat completion.
  *   
  *   The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
  * @param top_p
  *   An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
  *   
  *   We generally recommend altering this or `temperature` but not both.
  * @param presence_penalty
  *   Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
  *   
  *   [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
  * @param temperature
  *   What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
  *   
  *   We generally recommend altering this or `top_p` but not both.
  * @param function_call
  *   Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.
  * @param stop
  *   Up to 4 sequences where the API will stop generating further tokens.
  * @param stream
  *   If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
  * @param functions
  *   A list of functions the model may generate JSON inputs for.
  * @param user
  *   A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
  * @param logit_bias
  *   Modify the likelihood of specified tokens appearing in the completion.
  *   
  *   Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
  */
final case class CreateChatCompletionRequest(model: String, messages: List[ChatCompletionRequestMessage], functions: Option[List[ChatCompletionFunctions]] = None, function_call: Option[String] = None, temperature: Option[Double] = None, top_p: Option[Double] = None, n: Option[Int] = None, stream: Option[Boolean] = None, stop: Option[CreateChatCompletionRequestStop] = None, max_tokens: Option[Int] = None, presence_penalty: Option[Double] = None, frequency_penalty: Option[Double] = None, logit_bias: Option[Document] = None, user: Option[String] = None)
object CreateChatCompletionRequest extends ShapeTag.Companion[CreateChatCompletionRequest] {
  val id: ShapeId = ShapeId("openAI", "CreateChatCompletionRequest")

  val hints: Hints = Hints.empty

  implicit val schema: Schema[CreateChatCompletionRequest] = struct(
    string.required[CreateChatCompletionRequest]("model", _.model).addHints(smithy.api.Required()),
    Messages.underlyingSchema.required[CreateChatCompletionRequest]("messages", _.messages).addHints(smithy.api.Required()),
    Functions.underlyingSchema.optional[CreateChatCompletionRequest]("functions", _.functions),
    string.optional[CreateChatCompletionRequest]("function_call", _.function_call).addHints(smithy.api.Documentation("Controls how the model responds to function calls. \"none\" means the model does not call a function, and responds to the end-user. \"auto\" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{\"name\":\\ \"my_function\"}` forces the model to call that function. \"none\" is the default when no functions are present. \"auto\" is the default if functions are present.")),
    double.optional[CreateChatCompletionRequest]("temperature", _.temperature).addHints(smithy.api.Documentation("What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n")),
    double.optional[CreateChatCompletionRequest]("top_p", _.top_p).addHints(smithy.api.Documentation("An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n")),
    int.optional[CreateChatCompletionRequest]("n", _.n).addHints(smithy.api.Documentation("How many chat completion choices to generate for each input message.")),
    boolean.optional[CreateChatCompletionRequest]("stream", _.stream).addHints(smithy.api.Documentation("If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).\n")),
    CreateChatCompletionRequestStop.schema.optional[CreateChatCompletionRequest]("stop", _.stop),
    int.optional[CreateChatCompletionRequest]("max_tokens", _.max_tokens).addHints(smithy.api.Documentation("The maximum number of [tokens](/tokenizer) to generate in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model\'s context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.\n")),
    double.optional[CreateChatCompletionRequest]("presence_penalty", _.presence_penalty).addHints(smithy.api.Documentation("Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model\'s likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)\n")),
    double.optional[CreateChatCompletionRequest]("frequency_penalty", _.frequency_penalty).addHints(smithy.api.Documentation("Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model\'s likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)\n")),
    document.optional[CreateChatCompletionRequest]("logit_bias", _.logit_bias).addHints(smithy.api.Documentation("Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n")),
    string.optional[CreateChatCompletionRequest]("user", _.user).addHints(smithy.api.Documentation("A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n")),
  ){
    CreateChatCompletionRequest.apply
  }.withId(id).addHints(hints)
}

package openAI

import smithy4s.Hints
import smithy4s.Schema
import smithy4s.ShapeId
import smithy4s.ShapeTag
import smithy4s.schema.Schema.string
import smithy4s.schema.Schema.struct

/** The name and arguments of a function that should be called, as generated by the model.
  * @param name
  *   The name of the function to call.
  * @param arguments
  *   The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
  */
final case class ChatCompletionRequestMessageFunctionCall(name: String, arguments: String)
object ChatCompletionRequestMessageFunctionCall extends ShapeTag.Companion[ChatCompletionRequestMessageFunctionCall] {
  val id: ShapeId = ShapeId("openAI", "ChatCompletionRequestMessageFunctionCall")

  val hints: Hints = Hints(
    smithy.api.Documentation("The name and arguments of a function that should be called, as generated by the model."),
  )

  implicit val schema: Schema[ChatCompletionRequestMessageFunctionCall] = struct(
    string.required[ChatCompletionRequestMessageFunctionCall]("name", _.name).addHints(smithy.api.Documentation("The name of the function to call."), smithy.api.Required()),
    string.required[ChatCompletionRequestMessageFunctionCall]("arguments", _.arguments).addHints(smithy.api.Documentation("The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."), smithy.api.Required()),
  ){
    ChatCompletionRequestMessageFunctionCall.apply
  }.withId(id).addHints(hints)
}

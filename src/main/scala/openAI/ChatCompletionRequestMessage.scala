package openAI

import smithy4s.Hints
import smithy4s.Schema
import smithy4s.ShapeId
import smithy4s.ShapeTag
import smithy4s.schema.Schema.string
import smithy4s.schema.Schema.struct

/** @param role
  *   The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
  * @param content
  *   The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls.
  * @param name
  *   The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
  * @param function_call
  *   The name and arguments of a function that should be called, as generated by the model.
  */
final case class ChatCompletionRequestMessage(role: ChatCompletionRequestMessageRole, content: String, name: Option[String] = None, function_call: Option[ChatCompletionRequestMessageFunctionCall] = None)
object ChatCompletionRequestMessage extends ShapeTag.Companion[ChatCompletionRequestMessage] {
  val id: ShapeId = ShapeId("openAI", "ChatCompletionRequestMessage")

  val hints: Hints = Hints.empty

  implicit val schema: Schema[ChatCompletionRequestMessage] = struct(
    ChatCompletionRequestMessageRole.schema.required[ChatCompletionRequestMessage]("role", _.role).addHints(smithy.api.Required()),
    string.required[ChatCompletionRequestMessage]("content", _.content).addHints(smithy.api.Documentation("The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls."), smithy.api.Required()),
    string.optional[ChatCompletionRequestMessage]("name", _.name).addHints(smithy.api.Documentation("The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.")),
    ChatCompletionRequestMessageFunctionCall.schema.optional[ChatCompletionRequestMessage]("function_call", _.function_call),
  ){
    ChatCompletionRequestMessage.apply
  }.withId(id).addHints(hints)
}

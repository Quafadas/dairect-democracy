$version: "2.0"

namespace openAI

use alloy#simpleRestJson

@simpleRestJson
service OpenAIService {
    operations: [
      CreateChatCompletion,
    ]
}


@http(
    method: "POST"
    uri: "/chat/completions"
    code: 200
)
operation CreateChatCompletion {
    input: CreateChatCompletionInput
    output: CreateChatCompletion200
}

structure CreateChatCompletionInput {
    @httpPayload
    @required
    body: CreateChatCompletionRequest
}

structure CreateChatCompletion200 {
    @httpPayload
    @required
    body: CreateChatCompletionResponse
}

structure CreateChatCompletionResponse {
    @required
    id: String
    @required
    object: String
    @required
    created: Integer
    @required
    model: String
    @required
    choices: CreateChatCompletionResponseChoices
    usage: CreateChatCompletionResponseUsage
}

list CreateChatCompletionResponseChoices {
    member: CreateChatCompletionResponseChoicesItem
}

structure CreateChatCompletionResponseChoicesItem {
    index: Integer
    message: ChatCompletionResponseMessage
    finish_reason: CreateChatCompletionResponseChoicesItemFinishReason
}


structure ChatCompletionResponseMessage {
    @required
    role: ChatCompletionResponseMessageRole
    /// The contents of the message.
    content: String
    function_call: ChatCompletionResponseMessageFunctionCall
}

/// The name and arguments of a function that should be called, as generated by the model.
structure ChatCompletionResponseMessageFunctionCall {
    /// The name of the function to call.
    name: String
    /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    arguments: String
}

structure CreateChatCompletionResponseUsage {
    @required
    prompt_tokens: Integer
    @required
    completion_tokens: Integer
    @required
    total_tokens: Integer
}

structure CreateChatCompletionRequest {
    @required
    model: String
    @required
    messages: Messages
    functions: Functions
    /// Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.
    function_call: String
    /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    ///
    /// We generally recommend altering this or `top_p` but not both.
    ///
    temperature: Double
    /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    ///
    /// We generally recommend altering this or `temperature` but not both.
    ///
    top_p: Double
    /// How many chat completion choices to generate for each input message.
    n: Integer
    /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
    ///
    stream: Boolean
    stop: CreateChatCompletionRequestStop
    /// The maximum number of [tokens](/tokenizer) to generate in the chat completion.
    ///
    /// The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb) for counting tokens.
    ///
    max_tokens: Integer
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    ///
    /// [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
    ///
    presence_penalty: Double
    /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    ///
    /// [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
    ///
    frequency_penalty: Double
    /// Modify the likelihood of specified tokens appearing in the completion.
    ///
    /// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    ///
    logit_bias: Document
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    ///
    user: String
}

structure CreateChatCompletionRequestFunctionCallOneOfAlt1 {
    /// The name of the function to call.
    @required
    name: String
}

/// Up to 4 sequences where the API will stop generating further tokens.
///
union CreateChatCompletionRequestStop {
    alt1: CreateChatCompletionRequestStopOneOfAlt1
}


enum CreateChatCompletionResponseChoicesItemFinishReason {
    stop
    length
    function_call
}


@length(
    min: 1
    max: 4
)
list CreateChatCompletionRequestStopOneOfAlt1 {
    member: String
}

/// A list of functions the model may generate JSON inputs for.
@length(
    min: 1
)
list Functions {
    member: ChatCompletionFunctions
}

structure ChatCompletionFunctions {
    /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
    @required
    name: String
    /// A description of what the function does, used by the model to choose when and how to call the function.
    description: String
    @required
    parameters: ChatCompletionFunctionParameters
}

document ChatCompletionFunctionParameters

/// A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
@length(
    min: 1
)
list Messages {
    member: ChatCompletionRequestMessage
}

/// A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).
@length(
    min: 1
)
list Messages {
    member: ChatCompletionRequestMessage
}

structure ChatCompletionRequestMessage {
    @required
    role: ChatCompletionRequestMessageRole
    /// The contents of the message. `content` is required for all messages, and may be null for assistant messages with function calls.
    @required
    content: String
    /// The name of the author of this message. `name` is required if role is `function`, and it should be the name of the function whose response is in the `content`. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    name: String
    function_call: ChatCompletionRequestMessageFunctionCall
}

/// The name and arguments of a function that should be called, as generated by the model.
structure ChatCompletionRequestMessageFunctionCall {
    /// The name of the function to call.
    @required
    name: String
    /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    @required
    arguments: String
}


/// The role of the author of this message.
enum ChatCompletionResponseMessageRole {
    system
    user
    assistant
    function
}

/// The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
enum ChatCompletionRequestMessageRole {
    system
    user
    assistant
    function
}
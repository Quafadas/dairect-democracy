package io.github.quafadas.dairect

import io.github.quafadas.dairect.RunApi.Run

class RunTest extends ParseSuite:

  test("run correct 1") {
    val jsonString =
      """{"id":"run_gwaHwto74aQzOkq02GJHGby8","object":"thread.run","created_at":1725362892,"assistant_id":"asst_ob2NW6IM9xiktjRb6JIvQypr","thread_id":"thread_84VettsAjOmBNjUwq3pgL9tn","status":"requires_action","started_at":1725362893,"expires_at":1725363492,"cancelled_at":null,"failed_at":null,"completed_at":null,"required_action":{"type":"submit_tool_outputs","submit_tool_outputs":{"tool_calls":[{"id":"call_TtiJ4N2iBOdstmrVwogxRBjD","type":"function","function":{"name":"createOrOverwriteFileInDir","arguments":"{\n  \"contents\": \"# Summary of Scala Laminar UI Framework\\n\\n## Key Points\\n\\n1. **Functional Programming**: Laminar is designed with functional programming principles and integrates seamlessly with Scala and JavaScript.\\n2. **Reactive UI**: Provides a reactive way to build UIs, leveraging observables to represent the state of the application.\\n3. **No Virtual DOM**: Instead of a virtual DOM, Laminar directly manipulates the real DOM, aiming for better performance and less complexity.\\n4. **Airstream Integration**: Uses the Airstream library for its reactive streams and state management.\\n5. **Components**: Encourages building reusable components using functions and reactive variables.\\n6. **Controlled Inputs**: Inputs are controlled through observables, ensuring the UI state reflects the underlying data model precisely.\\n7. **Efficient Updates**: Automatically batches and optimizes UI updates to ensure high performance.\\n8. **Type Safety**: Takes advantage of Scalaï¿½s type system to provide compile-time guarantees about the correctness of the UI logic.\\n\\n## Examples\\n\\n### Controlled Input\\n\\nThis example demonstrates how you can create a controlled input in Laminar that only accepts digits and reset the value using a button.\\n\\n```scala\\nimport com.raquo.laminar.api.L.{*, given}\\nimport org.scalajs.dom\\n\\nval zipVar = Var(\\\"\\\")\\n\\nval app = div(\\n  form(\\n    onSubmit\\n      .preventDefault\\n      .mapTo(zipVar.now()) --> (zip => dom.window.alert(zip)),\\n    p(\\n      label(\\\"Zip code: \\\"),\\n      input(\\n        placeholder(\\\"12345\\\"),\\n        maxLength(5), // HTML can help block some undesired input\\n        controlled(\\n          value <-- zipVar,\\n          onInput.mapToValue.filter(_.forall(Character.isDigit)) --> zipVar\\n        )\\n      ),\\n      button(\\n        typ(\\\"button\\\"), // HTML buttons are of type \\\"submit\\\" by default\\n        \\\"Set SF zip code\\\",\\n        onClick.mapTo(\\\"94110\\\") --> zipVar\\n      )\\n    ),\\n    p(\\n      \\\"Your zip code: \\\",\\n      child.text <-- zipVar\\n    ),\\n    button(typ(\\\"submit\\\"), \\\"Submit\\\")\\n  )\\n)\\n\\nrender(containerNode, app)\\n```\\n\\n### Ajax Request\\n\\nThis example illustrates how to make AJAX requests using Laminar and handle responses, including error handling and request abortion.\\n\\n```scala\\nimport com.raquo.airstream.web.AjaxStream\\nimport com.raquo.airstream.web.AjaxStream.AjaxStreamError\\nimport com.raquo.laminar.api.L.{*, given}\\nimport org.scalajs.dom\\n\\ncase class AjaxOption(name: String, url: String)\\n\\nval options = List(\\n  AjaxOption(\\\"Valid Ajax request\\\", \\\"https://api.zippopotam.us/us/90210\\\"),\\n  AjaxOption(\\\"Download 100MB file (gives you time to abort)\\\", \\\"https://cachefly.cachefly.net/100mb.test\\\"),\\n  AjaxOption(\\\"URL that will fail due to invalid domain\\\", \\\"https://api.zippopotam.uxx/us/90210\\\"),\\n  AjaxOption(\\\"URL that will fail due to CORS restriction\\\", \\\"https://unsplash.com/photos/KDYcgCEoFcY/download?force=true\\\")\\n)\\nval selectedOptionVar = Var(options.head)\\nval pendingRequestVar = Var[Option[dom.XMLHttpRequest]](None)\\nval eventsVar = Var(List.empty[String])\\n\\nval app: HtmlElement = div(\\n  h1(\\\"Ajax Tester\\\"),\\n  options.map { option =>\\n    div(\\n      input(\\n        typ(\\\"radio\\\"),\\n        idAttr(option.name),\\n        nameAttr(\\\"ajaxOption\\\"),\\n        checked <-- selectedOptionVar.signal.map(_ == option),\\n        onChange.mapTo(option) --> selectedOptionVar\\n      ),\\n      label(forId(option.name), \\\" \\\" + option.name)\\n    )\\n  },\\n  br(),\\n  div(\\n    button(\\n      \\\"Send\\\",\\n      inContext { thisNode =>\\n        val clickStream = thisNode.events(onClick).sample(selectedOptionVar.signal)\\n        val responseStream = clickStream.flatMapSwitch { opt =>\\n          AjaxStream\\n            .get(\\n              url = opt.url,\\n              requestObserver = pendingRequestVar.someWriter,\\n              progressObserver = eventsVar.updater { (evs, p) =>\\n                val ev = p._2\\n                evs :+ s\\\"Progress: ${ev.loaded} / ${ev.total} (lengthComputable = ${ev.lengthComputable})\\\"\\n              },\\n              readyStateChangeObserver = eventsVar.updater { (evs, req) =>\\n                evs :+ s\\\"Ready state: ${req.readyState}\\\"\\n              }\\n            )\\n            .map(\\\"Response: \\\" + _.responseText)\\n            .recover { case err: AjaxStreamError => Some(err.getMessage) }\\n        }\\n\\n        List(\\n          clickStream.map(opt => List(s\\\"Starting: GET ${opt.url}\\\")) --> eventsVar,\\n          responseStream --> eventsVar.updater[String](_ :+ _)\\n        )\\n      }\\n    ),\\n    \\\" \\\",\\n    button(\\n      \\\"Abort\\\",\\n      onClick --> (_ => pendingRequestVar.now().foreach(_.abort()))\\n    )\\n  ),\\n  div(\\n    h2(\\\"Events:\\\"),\\n    div(children <-- eventsVar.signal.map(_.map(div(_))))\\n  )\\n)\\n\\nval containerNode = dom.document.querySelector(\\\"#mdoc-html-run0\\\")\\n\\nrender(containerNode, app)\\n```\\n\",\n  \"dir\": \"/tmp\",\n  \"fileName\": \"scala_laminar_summary.md\"\n}"}}]}},"last_error":null,"model":"gpt-4o","instructions":null,"tools":[{"type":"function","function":{"name":"readTextFile","description":"readTextFile","parameters":{"type":"object","required":["filePath"],"properties":{"filePath":{"type":"string"}}},"strict":false}},{"type":"function","function":{"name":"createOrOverwriteFileInDir","description":"createOrOverwriteFileInDir","parameters":{"type":"object","required":["dir","fileName"],"properties":{"contents":{"type":"string"},"dir":{"type":"string"},"fileName":{"type":"string"}}},"strict":false}},{"type":"function","function":{"name":"askForHelp","description":"askForHelp","parameters":{"type":"object","required":["question"],"properties":{"question":{"type":"string"}}},"strict":false}},{"type":"function","function":{"name":"makeTempDir","description":"makeTempDir","parameters":{"type":"object","required":["dirPrefix"],"properties":{"dirPrefix":{"type":"string"}}},"strict":false}},{"type":"file_search","file_search":{"ranking_options":{"ranker":"default_2024_08_21","score_threshold":0.0}}}],"tool_resources":{"file_search":{"vector_store_ids":["vs_IKkFtI4zhyqUv9cJzIW3x6GI"]},"code_interpreter":{"file_ids":[]}},"metadata":{},"temperature":1.0,"top_p":1.0,"max_completion_tokens":null,"max_prompt_tokens":null,"truncation_strategy":{"type":"auto","last_messages":null},"incomplete_details":null,"usage":null,"response_format":"auto","tool_choice":"auto","parallel_tool_calls":true}"""
        .trim()

    parseCheck[Run](jsonString)

  }

end RunTest

name: Continuous Integration

on:
  pull_request:
    branches: ['**', '!update/**', '!pr/**']
  push:
    branches: ['**', '!update/**', '!pr/**']
    tags: [v*]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OPEN_AI_API_TOKEN: ${{ secrets.OPEN_AI_API_TOKEN }}


concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest]
        scala: [3]
        java: [temurin@17]
        project: [js, jvm, native]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: coursier/setup-action@main
        with:
          jvm: temurin@17
          apps: mill

      - name: Check format
        run: mill mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll __.sources

      - name: Compile All
        run: mill api.__.compile && mill site.compile

      - name: Test Agentic
        if: matrix.project == 'jvm'
        run: mill agentic.test

  publish:
    if: github.repository == 'Quafadas/dairect-democracy' && contains(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup GPG secrets
        run: |
          gpg --version
          cat <(echo "${{ secrets.PGP_SECRET }}") | base64 --decode | gpg --batch --import --no-tty --yes
          gpg --list-secret-keys --keyid-format LONG

      - name: Publish to Maven Central
        run: mill -i mill.scalalib.PublishModule/publishAll __.publishArtifacts --sonatypeUri https://s01.oss.sonatype.org/service/local --sonatypeCreds "${{ secrets.SONATYPE_USERNAME }}:${{ secrets.SONATYPE_PASSWORD }}" --gpgArgs "--passphrase=${{ secrets.PGP_PASSPHRASE}},--batch,--yes,-a,-b,--pinentry-mode,loopback" --readTimeout 1200000 --awaitTimeout 1200000 --release true --signed true

  site:
    if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/doc_')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - run: mill site.publishDocs
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - uses: actions/upload-artifact@v3
        with:
          name: page
          path: out/site/publishDocs.dest
          if-no-files-found: error

  deploy:
    needs: site
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: page
        path: .
    - uses: actions/configure-pages@v4
    - uses: actions/upload-pages-artifact@v2
      with:
        path: .
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v3